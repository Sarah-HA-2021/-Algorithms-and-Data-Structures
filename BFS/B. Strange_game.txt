#include <iostream>
#include <stdint.h>
#include<vector>
#include <queue>
 
using namespace std;
 
vector <vector<int64_t>> graph; 
queue<int64_t> q ;
vector<int64_t> Distance;
vector<int64_t> parent;
 
 
 
using namespace std;
 
int main()
{
   int64_t n , a , b ;
  
   
   cin>> n>> a >> b;
     graph.resize(n);
    Distance.resize(n,-1);
    parent.resize(n,-1);
 
    q.push(a);
    Distance[a]=0;
    parent[a]=a;
 
 
   for ( int i = 0 ; i < n ; i++)
    {
         while (!(q.empty()))
        {
          int64_t curr= q.front();
          q.pop();
          
          if (curr==b)
          break;
          // three functions 
          
            int64_t  x1 = (curr+1) % n;
            int64_t  x2 = (curr* curr+1) % n;
            int64_t  x3 = (curr* curr*curr+1) % n;
            
               if (Distance[x1]==-1)
        { parent[x1]=curr;
         Distance[x1]  =Distance[curr] +1;
         q.push(x1);
         }
            
            
                        if (Distance[x2]==-1)
        { parent[x2]=curr;
         Distance[x2]  =Distance[curr] +1;
         q.push(x2);
         }
           
                                 if (Distance[x3]==-1)
        { parent[x3]=curr;
         Distance[x3]  =Distance[curr] +1;
         q.push(x3);
         } 
            
        
            
        }
        
        
        
    }
 
 
if (Distance[b]== -1)
cout<< -1;
 
 
//else if (Distance[b]== 0)
//cout<< b;
else {
cout<< Distance[b]<<"\n";
 
//int u = b ;
//vector <int> res;
 
//while (u < n && u >= 0 && u!=a)
//{   cout<<"sss";
   //res.push_back(u);
   //u = parent[u];}
   
   // if (u==a)
   // {res.push_back(u);
   //     break;
  //  }
    
    //else {
     //  res.push_back(u);
     //  u=parent[u];
        
   // }
    
//}
 
 // restor path
   int64_t k = b;
    vector<int64_t> result ; 
    
    while (k < n && k >=0)
        {
           
             if (k==a) // reached our vertix
             {
result.push_back(k);
                break; 
             }
             
             else {
                    result.push_back(k);
                    k=parent[k];
                 
            }
             
       }
 
 
 
     for (int j =  result.size()-1 ; j>=0; j--)
        cout<< result[j] << " ";
        
   //for (int i =  result.size()-1 ; i>=0; i--)
        //cout<< result[i]  << " ";     
  //for (int i = 0 ; i < parent.size() ; i++)
   //cout<< parent[i]<<" ";
   //cout<<parent.size();
 
}
    return 0;
}