#include <iostream>
#include <queue> 
 
using namespace std;
vector <vector<int>> graph; 
queue<int> q ;
vector<int> Distance;
vector<int> parent;
 
void BFS (int s)
{   
    q.push(s);
    Distance[s]=0;
    parent[s]=s;
    while (!(q.empty()))
    {
    int curr= q.front();
    q.pop();
    
    for (int i =0 ; i < graph [curr].size(); i++)
    {
        if (Distance[(graph [curr][i])]==-1)
        { parent[(graph [curr][i])]=curr;
         Distance[(graph [curr][i])]  =Distance[curr] +1;
         q.push((graph [curr][i]));
        
    }
    
    }
}
}
int main()
{
    int n , v1 , v2 ;
    
    cin>> n >> v1 >> v2;
    
    graph.resize(n);
    Distance.resize(n,-1);
    parent.resize(n,-1);
    
    for ( int i= 0 ; i < n ; i ++)
    for ( int j= 0 ; j <n ; j ++)
    { int l ; 
      cin>> l ; 
      if (l == 1)
      graph[i].push_back(j);
    }
  
   BFS (v1-1) ;
 
   if (Distance[v2-1]==-1)
   cout<< -1;
   
  // else if (Distance[v2-1]==0)
  // cout<< v1;
   
   else {
       
     //for (int i =0 ; parent.size() ; i ++)
    //cout << parent[i]<<" "  ;
    int k = v2-1;
    vector<int> result ; 
    
    while (k <n && k>=0)
         {
             //if (parent[k]!=-1 || pa)
            // k = parent[k]
             if (k==v1-1) // reached our vertix
             {
                result.push_back(k);
                break; 
             }
             
             else {
                    result.push_back(k);
                    k=parent[k];
                 
             }
             
         }
         
     cout<< Distance[v2-1]<< endl;
     
    // for (int i = 0 ; i < parent.size();i++)
     //cout<<parent[i]<<" ";
     for (int i =  result.size()-1 ; i>=0; i--)
        cout<< result[i] +1 << " ";
       
   }
    return 0;
}