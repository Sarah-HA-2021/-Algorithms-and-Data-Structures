#include <iostream>
#include <bits/stdc++.h> 
 
using namespace std;
 
vector <vector<pair<int,int>>> g;
vector <int> visited ;
vector <long long> d ;
vector <int> node_set;
 
int main()
{  // pair distance / key 
priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>> > h; 
 
int  n   , v1 , v2; 
long long m ; 
 
cin >> n >> m >> v1 >>v2;
g.resize(n);
node_set.resize(n);
visited.resize(n,0);
d.resize(n,LLONG_MAX);
 
 
 
//initialize;
int s = v1-1;
d[s]=0;
 
   for (int i = 0 ; i < m ; i++)
     {
         int x , y , l;
         cin>> x>> y >> l ; 
         pair <int,int> node = {y-1, l};
         g[x-1].push_back(node);
         
         pair <int,int> node2 = {x-1, l};
         g[y-1].push_back(node2);
         
           }
 
 
 
//for (int  i = 0 ; i < n ; i++)
//if (i == s) 
h.push(make_pair(0, s));
//else
//h.push(make_pair(INT_MAX, i)); 
 
//if ((v1 == v2) && m == 0 )
//cout << -1 ;
//else
{
 
  // distance / index
 
//pair<int, int> top = h.top(); 
    //cout << top.first << " " << top.second; 
    
pair <long long, int>curr =h.top();
int ind;
long long dist;
long long Min;
int ind2;
int weight;
 
int flag = false ;
 
while (!h.empty() )
//&& flag && node_set.size()<= n)
 
 {  
    ind = curr.second; // index
    //cout <<ind<<endl;
 
    for (int i = 0 ; i < g[ind].size(); i++)
    {   
        ind2 = g[ind][i].first; 
        int weight =  g[ind][i].second;
            //if (ind2 == v2-1)
           // flag = true;
        //cout <<" "  << g[ind][i].first << " ";
        if (! visited[ind2]==1){
        if (d[ind2]> d[ind] + weight  &&  d[ind] !=  LLONG_MAX)
          {   
              d[ind2]= d[ind] + weight;
              h.push(make_pair(d[ind2],ind2));
          }
         if (d[ind2] == LLONG_MAX)
         break;}
         
    }
    
    //for (int i = 0 ; i < g[ind].size(); i++) // loop 
   // { ind2 =g[ind][i].first;
    //  weight = g[ind][i].second;
     // if (visited[ind2]==0)
    //  {if (d[ind2]> weight + d[i] && d[i]!=INT_MAX)
     // {d[ind2]=weight + d[i];
     // h.push(make_pair(d[ind2],ind2));
   // }
    //  }
      
    //  if ( d[ind2]== INT_MAX )
   // flag = false;
   // }
    
    visited[ind]=1;
   // node_set.push_back(ind);
    //h.pop();
     h.pop();
     
     while (visited[h.top().second]==1 && ! h.empty())
     { h.pop();
        
     }
      curr = h.top();
 }    
 
    
if (d[v2-1] == LLONG_MAX)
cout<< -1;
 
else  cout << d[v2-1] ;
}
    return 0;
}